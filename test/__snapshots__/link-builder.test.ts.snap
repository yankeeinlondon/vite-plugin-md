// Vitest Snapshot v1

exports[`link testing > component snapshot is consistent 1`] = `
"
<template>
  <div class=\\"markdown-body\\"><h1>Links</h1>
<ul>
<li>An  is one which links to another site whereas an <router-link class=\\" internal-link router-link\\" to=\\"/simple\\">internal link</router-link> links to content on the same site.</li>
<li>Within the category of “internal links” we have <router-link class=\\" internal-link router-link\\" to=\\"/foo/bar\\">fully qualified links</router-link> and <router-link class=\\" internal-link router-link\\" to=\\"/foo/bar\\">relative links</router-link> where with relative links we must ensure that the current page’s route is understood and incorporated into the link</li>
<li>Check out <router-link class=\\" internal-link anchor-tag router-link\\" to=\\"/#section-2\\">Section 2</router-link> for the good stuff … well actually to be fair it’s just an example of an “anchor tag” where we’re linking to the another part of the same page</li>
<li>External links are great but some aren’t safe: </li>
</ul>
<h2>Markdown file in a link</h2>
<ul>
<li>When we reference an index MD file the <router-link class=\\" internal-link router-link\\" to=\\"/foobar/\\">index route</router-link> is left with just the path component, no file component</li>
<li>Similarly if an <em>internal</em> link to a <router-link class=\\" internal-link router-link\\" to=\\"/foo/bar\\">non-index route</router-link> has a <code v-pre>.md</code> reference in it … this is cleaned up.</li>
<li>NOTE: <em>external</em> links for both  and  are not changed (but shouldn’t really be happening a lot)</li>
</ul>
<h2>Content Types</h2>
<ul>
<li>If we link to , , or  we should get classes which indicate the content type</li>
<li>My favorite colors are , , and </li>
</ul>
<h2>Router Awareness</h2>
<ul>
<li>we can convert all internal links from normal <code v-pre>&lt;a href=&quot;xyz&quot;&gt;</code> tags to <code v-pre>&lt;router-link to=&quot;xyz&quot;&gt;</code> tags instead; this feature is on by default</li>
<li>this is helpful for a PWA as you get the benefits of</li>
</ul>
<h2>Section 2</h2>
<p>The good stuff</p>
<p></p>
</div>
</template>

<script setup>
  defineExpose({ frontmatter: {\\"title\\":\\"Links Testing\\"} })
  
 const title = \\"Links Testing\\"
 const excerpt = undefined
</script>
    
<script>
  export const frontmatter = {\\"title\\":\\"Links Testing\\"}
</script>
    
"
`;
